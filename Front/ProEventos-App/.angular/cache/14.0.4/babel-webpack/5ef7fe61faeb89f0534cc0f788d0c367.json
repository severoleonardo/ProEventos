{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, PLATFORM_ID, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { take } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n\nclass FocusTrapManager {\n  constructor() {\n    // A stack of the FocusTraps on the page. Only the FocusTrap at the\n    // top of the stack is active.\n    this._focusTrapStack = [];\n  }\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n\n\n  register(focusTrap) {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n\n    focusTrap._enable();\n  }\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n\n\n  deregister(focusTrap) {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n    const i = stack.indexOf(focusTrap);\n\n    if (i !== -1) {\n      stack.splice(i, 1);\n\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n\n}\n\nFocusTrapManager.Éµfac = function FocusTrapManager_Factory(t) {\n  return new (t || FocusTrapManager)();\n};\n\nFocusTrapManager.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: FocusTrapManager,\n  factory: FocusTrapManager.Éµfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(FocusTrapManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\n\nlet hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n\n\nclass Platform {\n  constructor(_platformId) {\n    this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed\n    // without the navigator, the following checks will fail. This is preferred because\n    // sometimes the Document may be shimmed without the user's knowledge or intention\n\n    /** Whether the Angular application is being rendered in the browser. */\n\n    this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n    /** Whether the current browser is Microsoft Edge. */\n\n    this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n    /** Whether the current rendering engine is Microsoft Trident. */\n\n    this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n\n    /** Whether the current rendering engine is Blink. */\n\n    this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n    // ensure that Webkit runs standalone and is not used as another engine's base.\n\n    /** Whether the current rendering engine is WebKit. */\n\n    this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n    /** Whether the current platform is Apple iOS. */\n\n    this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n    // them self as Gecko-like browsers and modify the userAgent's according to that.\n    // Since we only cover one explicit Firefox case, we can simply check for Firefox\n    // instead of having an unstable check for Gecko.\n\n    /** Whether the current browser is Firefox. */\n\n    this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n    /** Whether the current platform is Android. */\n    // Trident on mobile adds the android platform to the userAgent to trick detections.\n\n    this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n    // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n    // Safari browser should also use Webkit as its layout engine.\n\n    /** Whether the current browser is Safari. */\n\n    this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n  }\n\n}\n\nPlatform.Éµfac = function Platform_Factory(t) {\n  return new (t || Platform)(i0.ÉµÉµinject(PLATFORM_ID));\n};\n\nPlatform.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: Platform,\n  factory: Platform.Éµfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(Platform, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for the isFocusable method.\n */\n\n\nclass IsFocusableConfig {\n  constructor() {\n    /**\n     * Whether to count an element as focusable even if it is not currently visible.\n     */\n    this.ignoreVisibility = false;\n  }\n\n} // The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nclass InteractivityChecker {\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n\n\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n\n\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n\n\n  isTabbable(element) {\n    // Nothing is tabbable on the server ðŸ˜Ž\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      } // Browsers disable tabbing to an element inside of an invisible frame.\n\n\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    } // In iOS, the browser only considers some specific elements as tabbable.\n\n\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      } // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n\n\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      } // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n\n\n      if (tabIndexValue !== null) {\n        return true;\n      } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n\n\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n\n\n  isFocusable(element, config) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && (config?.ignoreVisibility || this.isVisible(element));\n  }\n\n}\n\nInteractivityChecker.Éµfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(i0.ÉµÉµinject(Platform));\n};\n\nInteractivityChecker.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.Éµfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\n\n\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\n\n\nfunction coerceBooleanProperty(value) {\n  return value != null && `${value}` !== 'false';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\n\n\nclass FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n\n\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n\n\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusInitialElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n\n\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusInitialElement() {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      } // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n\n        focusableChild?.focus();\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElement() {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElement() {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n\n\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n\n\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n\n\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in reverse DOM order.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Creates an anchor element. */\n\n\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n\n\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n\n\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n\n\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\n\n\nclass FocusTrapFactory {\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n\n\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n\n}\n\nFocusTrapFactory.Éµfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(i0.ÉµÉµinject(InteractivityChecker), i0.ÉµÉµinject(i0.NgZone), i0.ÉµÉµinject(DOCUMENT));\n};\n\nFocusTrapFactory.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.Éµfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Directive for trapping focus within a region. */\n\n\nclass FocusTrapDirective {\n  constructor(_elementRef, _focusTrapFactory, _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n    this._previouslyFocusedElement = null;\n    this._autoCapture = false;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /** Whether the focus trap is active. */\n\n\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n\n\n  get autoCapture() {\n    return this._autoCapture;\n  }\n\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n      this._captureFocus();\n    }\n  }\n\n  _captureFocus() {\n    this._previouslyFocusedElement = this._document.activeElement;\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n\n}\n\nFocusTrapDirective.Éµfac = function FocusTrapDirective_Factory(t) {\n  return new (t || FocusTrapDirective)(i0.ÉµÉµdirectiveInject(i0.ElementRef), i0.ÉµÉµdirectiveInject(FocusTrapFactory), i0.ÉµÉµdirectiveInject(DOCUMENT));\n};\n\nFocusTrapDirective.Éµdir = /* @__PURE__ */i0.ÉµÉµdefineDirective({\n  type: FocusTrapDirective,\n  selectors: [[\"\", \"focusTrap\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"focusTrap\"],\n  features: [i0.ÉµÉµNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(FocusTrapDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[focusTrap]',\n      exportAs: 'focusTrap'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n\nclass FocusTrapModule {\n  static forRoot() {\n    return {\n      ngModule: FocusTrapModule,\n      providers: [FocusTrapManager, Platform, InteractivityChecker]\n    };\n  }\n\n}\n\nFocusTrapModule.Éµfac = function FocusTrapModule_Factory(t) {\n  return new (t || FocusTrapModule)();\n};\n\nFocusTrapModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: FocusTrapModule\n});\nFocusTrapModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(FocusTrapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [FocusTrapDirective],\n      exports: [FocusTrapDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FocusTrap, FocusTrapDirective, FocusTrapModule };","map":{"version":3,"names":["i0","Injectable","PLATFORM_ID","Inject","Directive","Input","NgModule","isPlatformBrowser","DOCUMENT","CommonModule","take","FocusTrapManager","constructor","_focusTrapStack","register","focusTrap","filter","ft","stack","length","_disable","push","_enable","deregister","i","indexOf","splice","Éµfac","Éµprov","type","args","providedIn","hasV8BreakIterator","Intl","v8BreakIterator","Platform","_platformId","isBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","Object","decorators","IsFocusableConfig","ignoreVisibility","InteractivityChecker","_platform","isDisabled","element","hasAttribute","isVisible","hasGeometry","getComputedStyle","visibility","isTabbable","frameElement","getFrameElement","getWindow","getTabIndexValue","nodeName","toLowerCase","tabIndexValue","isPotentiallyTabbableIOS","tabIndex","isFocusable","config","isPotentiallyFocusable","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","undefined","getAttribute","isNaN","parseInt","inputType","node","ownerDocument","defaultView","coerceBooleanProperty","value","FocusTrap","_element","_checker","_ngZone","_document","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","enabled","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","parentNode","removeChild","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","querySelectorAll","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","focusableChild","focus","hasAttached","root","children","childNodes","tabbableChild","nodeType","ELEMENT_NODE","anchor","createElement","classList","add","setAttribute","isEnabled","removeAttribute","toggleAnchors","fn","isStable","onStable","pipe","subscribe","FocusTrapFactory","create","deferCaptureElements","NgZone","FocusTrapDirective","_elementRef","_focusTrapFactory","_previouslyFocusedElement","_autoCapture","nativeElement","autoCapture","ngOnDestroy","ngAfterContentInit","_captureFocus","ngDoCheck","ngOnChanges","changes","autoCaptureChange","firstChange","activeElement","ElementRef","Éµdir","selector","exportAs","FocusTrapModule","forRoot","ngModule","providers","Éµmod","Éµinj","imports","declarations","exports"],"sources":["F:/projects/PROEVENTOS/Front/ProEventos-App/node_modules/ngx-bootstrap/focus-trap/fesm2020/ngx-bootstrap-focus-trap.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, PLATFORM_ID, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n}\nFocusTrapManager.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapManager, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\nFocusTrapManager.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapManager, providedIn: 'root' });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n}\ncatch {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId ?\n            isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n            !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n}\nPlatform.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: Platform, deps: [{ token: PLATFORM_ID }], target: i0.ÉµÉµFactoryTarget.Injectable });\nPlatform.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: Platform, providedIn: 'root' });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server ðŸ˜Ž\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n            (config?.ignoreVisibility || this.isVisible(element));\n    }\n}\nInteractivityChecker.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: InteractivityChecker, deps: [{ token: Platform }], target: i0.ÉµÉµFactoryTarget.Injectable });\nInteractivityChecker.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: InteractivityChecker, providedIn: 'root' });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: InteractivityChecker, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: Platform }]; } });\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`);\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement() {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild?.focus();\n                return !!focusableChild;\n            }\n            redirectToElement.focus();\n            return true;\n        }\n        return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement() {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement() {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Injectable });\nFocusTrapFactory.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapFactory, providedIn: 'root' });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/** Directive for trapping focus within a region. */\nclass FocusTrapDirective {\n    constructor(_elementRef, _focusTrapFactory, _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this._autoCapture = false;\n        this._document = _document;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this.focusTrap.enabled;\n    }\n    set enabled(value) {\n        this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() {\n        return this._autoCapture;\n    }\n    set autoCapture(value) {\n        this._autoCapture = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = this._document.activeElement;\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n}\nFocusTrapDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapDirective, deps: [{ token: i0.ElementRef }, { token: FocusTrapFactory }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Directive });\nFocusTrapDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: FocusTrapDirective, selector: \"[focusTrap]\", inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"focusTrap\"], usesOnChanges: true, ngImport: i0 });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[focusTrap]',\n                    exportAs: 'focusTrap'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { enabled: [{\n                type: Input,\n                args: ['cdkTrapFocus']\n            }], autoCapture: [{\n                type: Input,\n                args: ['cdkTrapFocusAutoCapture']\n            }] } });\n\nclass FocusTrapModule {\n    static forRoot() {\n        return {\n            ngModule: FocusTrapModule,\n            providers: [\n                FocusTrapManager,\n                Platform,\n                InteractivityChecker\n            ]\n        };\n    }\n}\nFocusTrapModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nFocusTrapModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapModule, declarations: [FocusTrapDirective], imports: [CommonModule], exports: [FocusTrapDirective] });\nFocusTrapModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapModule, imports: [[CommonModule]] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FocusTrapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [FocusTrapDirective],\n                    exports: [FocusTrapDirective]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FocusTrap, FocusTrapDirective, FocusTrapModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}